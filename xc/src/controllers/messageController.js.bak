const Message = require("../models/Message");
const User = require("../models/User");
const Chat = require("../models/Chat");
const { getFileType } = require("../utils/fileUpload");

// @desc    Send a new message
// @route   POST /api/messages
// @access  Private
exports.sendMessage = async (req, res) => {
  const { content, chatId } = req.body;
  const file = req.file;

  if ((!content && !file) || !chatId) {
    return res.status(400).json({ message: "Please provide content or a file, and a chat ID" });
  }

  try {
    // Create message data
    const messageData = {
      sender: req.user._id,
      chat: chatId,
      readBy: [req.user._id],
      deliveredTo: [req.user._id]
    };

    // Add content if provided
    if (content) {
      messageData.content = content;
    }

    // Add file data if a file was uploaded
    if (file) {
      const fileUrl = `/uploads/${file.filename}`;
      const fileType = getFileType(file.mimetype);
      
      messageData.fileUrl = fileUrl;
      messageData.fileType = fileType;
      messageData.fileName = file.originalname;
    }

    // Create new message
    let message = await Message.create(messageData);

    // Populate sender information
    message = await message.populate("sender", "name profilePic");
    message = await message.populate("chat");
    message = await User.populate(message, {
      path: "chat.users",
      select: "name email profilePic",
    });

    // Update the last message in the chat
    await Chat.findByIdAndUpdate(chatId, { lastMessage: message._id });

    // Emit socket event for new message
    if (global.io) {
      // Send to all users in the chat
      global.io.to(chatId).emit("new_message", message);
      
      // Send notifications to other users in the chat
      message.chat.users.forEach((user) => {
        if (user._id.toString() !== req.user._id.toString()) {
          // Check if user is online
          const userSocketId = global.connectedUsers.get(user._id.toString());
          
          if (userSocketId) {
            global.io.to(userSocketId).emit("notification", {
              chatId,
              message: {
                _id: message._id,
                sender: {
                  _id: req.user._id,
                  name: req.user.name,
                  profilePic: req.user.profilePic
                },
                content: message.content,
                fileUrl: message.fileUrl,
                fileType: message.fileType,
                fileName: message.fileName,
                chat: {
                  _id: chatId,
                  chatName: message.chat.chatName,
                  isGroupChat: message.chat.isGroupChat
                }
              }
            });
          }
        }
      });
      
      console.log("Socket message emitted for chatId:", chatId);
    } else {
      console.log("Socket io not available");
    }

    res.status(201).json(message);
  } catch (error) {
    console.error("Message sending error:", error);
    res.status(500).json({ message: error.message });
  }
};

// @desc    Get all messages in a chat
// @route   GET /api/messages/:chatId
// @access  Private
exports.getMessages = async (req, res) => {
  try {
    const messages = await Message.find({ chat: req.params.chatId })
      .populate("sender", "name email profilePic")
      .populate("chat");

    res.json(messages);
  } catch (error) {
    console.error(error);
    res.status(500).json({ message: error.message });
  }
};

// @desc    Delete a message for me
// @route   DELETE /api/messages/:id/forMe
// @access  Private
exports.deleteMessageForMe = async (req, res) => {
  try {
    const messageId = req.params.id;
    const userId = req.user._id;

    const message = await Message.findById(messageId);
    
    if (!message) {
      return res.status(404).json({ message: 'Message not found' });
    }
    
    // Add the user to deletedFor array
    await Message.findByIdAndUpdate(messageId, {
      $addToSet: { deletedFor: userId }
    });
    
    res.json({ message: 'Message deleted for you' });
  } catch (error) {
    console.error(error);
    res.status(500).json({ message: error.message });
  }
};

// @desc    Delete a message for everyone
// @route   DELETE /api/messages/:id/forEveryone
// @access  Private
exports.deleteMessageForEveryone = async (req, res) => {
  try {
    const messageId = req.params.id;
    const userId = req.user._id;

    const message = await Message.findById(messageId);
    
    if (!message) {
      return res.status(404).json({ message: 'Message not found' });
    }
    
    // Only sender or group admin can delete for everyone
    if (message.sender.toString() !== userId.toString()) {
      const chat = await Chat.findById(message.chat);
      if (!chat.isGroupChat || chat.groupAdmin.toString() !== userId.toString()) {
        return res.status(403).json({ message: 'Not authorized to delete this message for everyone' });
      }
    }
    
    await Message.findByIdAndDelete(messageId);
    
    // Emit socket event for message deletion
    if (global.io) {
      global.io.to(message.chat.toString()).emit('message_deleted', {
        messageId,
        chat: message.chat,
      });
    }
    
    res.json({ message: 'Message deleted for everyone' });
  } catch (error) {
    console.error(error);
    res.status(500).json({ message: error.message });
  }
};

// @desc    Mark messages as read
// @route   PUT /api/messages/read
// @access  Private
exports.markMessagesAsRead = async (req, res) => {
  try {
    const { chatId } = req.body;
    const userId = req.user._id;

    // Validate input
    if (!chatId) {
      return res.status(400).json({ message: 'Chat ID is required' });
    }

    // Check if user is part of the chat
    const chat = await Chat.findById(chatId);
    if (!chat || !chat.users.some(u => u.toString() === userId.toString())) {
      return res.status(403).json({ message: 'Not authorized to access this chat' });
    }

    // Mark all unread messages in this chat as read by this user
    const updatedMessages = await Message.updateMany(
      { 
        chat: chatId, 
        sender: { $ne: userId }, // Don't mark your own messages
        readBy: { $ne: userId } // Only update if not already read
      },
      { 
        $addToSet: { readBy: userId } 
      }
    );

    // Also ensure all messages are marked as delivered
    await Message.updateMany(
      { 
        chat: chatId, 
        sender: { $ne: userId },
        deliveredTo: { $ne: userId }
      },
      { 
        $addToSet: { deliveredTo: userId } 
      }
    );

    // Emit socket event for read receipts
    if (global.io) {
      global.io.to(chatId).emit('messages_read', {
        chatId,
        userId: userId.toString()
      });
    }

    res.json({ 
      success: true, 
      updatedCount: updatedMessages.nModified 
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ message: error.message });
  }
};

// @desc    Mark messages as delivered
// @route   PUT /api/messages/deliver
// @access  Private
exports.markMessagesAsDelivered = async (req, res) => {
  try {
    const { chatId } = req.body;
    const userId = req.user._id;

    // Validate input
    if (!chatId) {
      return res.status(400).json({ message: 'Chat ID is required' });
    }

    // Check if user is part of the chat
    const chat = await Chat.findById(chatId);
    if (!chat || !chat.users.some(u => u.toString() === userId.toString())) {
      return res.status(403).json({ message: 'Not authorized to access this chat' });
    }

    // Mark all undelivered messages in this chat as delivered to this user
    const updatedMessages = await Message.updateMany(
      { 
        chat: chatId, 
        sender: { $ne: userId }, // Don't mark your own messages
        deliveredTo: { $ne: userId } // Only update if not already delivered
      },
      { 
        $addToSet: { deliveredTo: userId } 
      }
    );

    // Emit socket event for delivery receipts
    if (global.io) {
      global.io.to(chatId).emit('messages_delivered', {
        chatId,
        userId: userId.toString()
      });
    }

    res.json({ 
      success: true, 
      updatedCount: updatedMessages.nModified 
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ message: error.message });
  }
};
